STACKS INTRODUCTION ------------------------------------------------------>
    > A stack is a data structure which contains an ordered set of data.

    > They provide three methods for interaction:
        1. Push - adds data to the top of the stack
        2. Pop - returns and removes data from the top of the stack
        3. Peek - returns data from the top of the stack without removing it

    > Consider a stack as a set of weights. The only weight that you can 
    remove (pop) from the stack is the top one. You can peek and read the top
    weight without removing it from the stack. The last plate that you put down
    becomes the first one that you can access. This is a Last In, First Out or
    LIFO structure. 

STACKS IMPLEMENTATION ---------------------------------------------------->
    > Stacks can be implemented with a Linked List as the underlying data 
    structure. A Linked List is more efficient than a list or array.

    > The top of the stack is equivalent to the head node of a linked list and 
    the bottom of the stack is equivalent to the tail node. 

    > One constraint that may be placed on a stack is its size because it will 
    limit and quantify the resources the data structure will take up when it's full.

    > If you attempt to push data onto an already full stack, it will result in a 
    stack overflow. Also, if you attempt to pop data from an empty stack, it will
    result in a stack underflow. 
    
STACKS PUSH AND POP ------------------------------------------------------>
    > The stack's push() and pop() methods are what we use to add and remove items
    from it. 
    > pop() returns the value of the item that it is removing.
    > We can only make modifications to the top of the stack. 

STACKS SIZE -------------------------------------------------------------->
    > Helper methods simplify our code by abstracting and labeling chunks of code
    into a new function. 
    > The function lets us repeat the desired behavior. Without the helper, we'd 
    have to keep rewriting the same code. 
    > An important helper method of a stack would be one that checks if our stack
    has room for more items. It's also helpful to have a method that checks if 
    the stack is empty. 

STACKS QUIZ -------------------------------------------------------------->
    1. What does the pop() method do? - Checks to see if the stack is empty and 
    removes the top item from a stack if there is an item to remove. 

    2. What goes inside a stack's __init__() method? - When you instantiate a 
    stack, the size is 0, there is no top_item yet, so we set it to None, and 
    we give the limit paramater a default integer to help us limit the size
    of our stack to prevent stack overflow. 

    3. What does the push() method do? - Checks to see if there is enough space
    in the stack to add a new item and then adds the item if there is space.

    4. True or False: You can traverse a stack through its nodes - False; A stack 
    can only view and make changes to the top node in the stack; however we can 
    traverse a linked list through its nodes