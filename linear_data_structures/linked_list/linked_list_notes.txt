Linked List Introduction ------------------------------------------------->
    > Linked lists are one of the basic data structures used in computer
    science. They serve as the foundation for more complex data structures.

    > The list is comprised of a series of nodes. The head node is the node
    at the beginning of the list. Each node contains data and a link (pointer)
    to the next node in the list. The list is terminated when a node's 
    link is null. This is called the tail node.

    > Since the nodes use links to denote the next node in the sequence, the
    nodes are not required to be sequentially located in memory. These links
    also allow for quick insertion and removal of nodes. 

    > Common operations on a linked list may include:
        * adding nodes, removing nodes, finding a node, traversing the LL

    > Linked Lists typically contain unidirectional links (next node), but
    some implementations make use of bidirectional links(next & previous node)

LL Adding & Removing Nodes ----------------------------------------------->
    > Because nodes are linked to from only one other node, you can't add or 
    remove nodes without doing a bit of maintenance.

    > Adding a node to the beginning of the list requires you to link your 
    new node to the current head node. This way, you maintain your connection
    with the following nodes in the list. 

    > To properly maintain the list when removing a node from the middle of the 
    linked list, you need to be sure to adjust the link on the previous node so
    that it points to the follwing node.
    > Depending on the language, nodes which are not referenced are removed
    automatically. "Removing" a node is equivalent to removing all
    references to the node. 


