QUEUES INTRODUCTION --------------------------------------------->
    > A queue is a data structure which contains an ordered set of data.
    > Queues provide three methods for interaction:
        1. Enqueue - adds data to the 'back' or the end of the queue
        2. Dequeue - provides and removes data from the 'front' or beginning
        of the queue
        3. Peek - reveals data from the 'front' of the queue without
        removing it

    > This data structure mimics a physical queue of objects like a 
    line of people buying concert tickets. Each person has a name 
    (data). The first person to enqueue (get into line), is both
    at the front and back of the line. As each new person enqueues,
    they become the new back of the line. When going into the 
    concert hall, they enter beginning with the person who was
    at the front of the line. Each person who entered is dequeued
    from the front of the line. If the associate just wants to know 
    how many customers remain, she can just peek and get their 
    name without remiving them from the queue. 

> The first person in the queue is the first to be served. Queues
are a First In, First Out or FIFO structure. 

QUEUES IMPLEMENTATION ----------------------------------------->
    > Queues can be implemented using a linked list as the underlying
    data structure. The front of the queue is equivalent to the head 
    node of a linked list and the back of the queue is equivalent to 
    the tail node. It could also be implemented with an array. 

    > Operations are only allowed to affect the front or the back of the 
    queue. Any traversal or modification to other nodes within the linked
    list is disallowed. Because both ends of the queue must be accessible,
    a reference to both the head node and the tail node must be maintained. 

    > One last constraint that may be placed on a queue is its length. 
    If a queue has a limit on the amount of data that can be placed into
    it, it is considered a bounded queue. 

    > Similar to stacks, attempting to enqueu data onto an already full 
    queue will result in a queue overflow. If you attempt to dequeue data
    from an empty queue, it will result in a queue underflow. 

    > Bounded queues require limit on the number of nodes that can be 
    contained, while other queues do not. To account for this, we can add
    a size property to keep track of the queue's current size, and a 
    max_size property limit the total node count

    > Enqueue is another way of saying "add to a queue". When using enqueue(),
    there are three scenarios that we are concered with when adding a node to
    queue:
        1. The queue is empty, so the node we're adding is both the head 
        and tail of the queue
        2. The queue has at least one other node, so the added node becomes
        the new tail
        3. The queue is full, so the node will not get added because we 
        don't want the queue to 'overflow'.

    > Dequeue is another way of saying "remove from a queue". When using
    dequeue(), there are three scenarios that we are concered about:
        1. The queue is empty, so we cannot remove or return any nodes
        lest we run into queue 'underflow'
        2. The queue has one node, so when we remove it, the queue will
        be empty and we need to reset the queue's head and tail to None
        3. The queue has more than one node, and we just remove the head
        node and reset the head to the following node 

QUEUE QUIZ --------------------------------------------------------------->
    1. is_empty() is a useful mathod for preventing? - Queue underflow may
    occur when we try to remove items from a queue when there are no items 
    to remove.

    2. Which two Queue methods should tell alert that the queue is empty?
    - dequeue() and peek(); if the queue is empty, then it is not possible
    to view or remove the value of the first item

    3. Why is has_space() a useful method for the Queue class? - It allows
    us to see if we can enqueue() a new value on the end of the queue

    4. If you instantiate an empty queue, what should self.head and self.tail
    be? - None and None