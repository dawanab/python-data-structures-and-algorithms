QUEUES INTRODUCTION --------------------------------------------->
    > A queue is a data structure which contains an ordered set of data.
    > Queues provide three methods for interaction:
        1. Enqueue - adds data to the 'back' or the end of the queue
        2. Dequeue - provides and removes data from the 'front' or beginning
        of the queue
        3. Peek - reveals data from the 'front' of the queue without
        removing it

    > This data structure mimics a physical queue of objects like a 
    line of people buying concert tickets. Each person has a name 
    (data). The first person to enqueue (get into line), is both
    at the front and back of the line. As each new person enqueues,
    they become the new back of the line. When going into the 
    concert hall, they enter beginning with the person who was
    at the front of the line. Each person who entered is dequeued
    from the front of the line. If the associate just wants to know 
    how many customers remain, she can just peek and get their 
    name without remiving them from the queue. 

> The first person in the queue is the first to be served. Queues
are a First In, First Out or FIFO structure. 

QUEUES IMPLEMENTATION ----------------------------------------->
    > Queues can be implemented using a linked list as the underlying
    data structure. The front of the queue is equivalent to the head 
    node of a linked list and the back of the queue is equivalent to 
    the tail node. It could also be implemented with an array. 

    > Operations are only allowed to affect the front or the back of the 
    queue. Any traversal or modification to other nodes within the linked
    list is disallowed. Because both ends of the queue must be accessible,
    a reference to both the head node and the tail node must be maintained. 

    > One last constraint that may be placed on a queue is its length. 
    If a queue has a limit on the amount of data that can be placed into
    it, it is considered a bounded queue. 

    > Similar to stacks, attempting to enqueu data onto an already full 
    queue will result in a queue overflow. If you attempt to dequeue data
    from an empty queue, it will result in a queue underflow. 

